package com.baofeng.com.baofeng.mojing;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.res.AssetManager;
import android.content.res.Resources;



public class MojingSDK
{
    public static int 	SENSOR_ERROR_NOERROR		= 0;
	public static int 	SENSOR_ERROR_NoMag			=0x01;
	public static int 	SENSOR_ERROR_NoGryo			=0x04;
	public static int 	SENSOR_ERROR_GryoTooSlow	=0x08;
	public static int 	SENSOR_ERROR_NoAccel		=0x10;
	public static int 	SENSOR_ERROR_AccelTooSlow	=0x20;

	static 
	 {
         System.loadLibrary("com.baofeng.mojing");
     }


	private static native boolean Init(String ApplicationName , int nWidth, int nHeight, float xdpi, float ydpi, String ProfilePath);
	public static boolean Init(Context context)
	{
		String path = exportFromAssetsFile(context);//context.getApplicationContext().getPackageResourcePath();
		String appName = getApplicationName(context);
		android.util.DisplayMetrics dm = context.getResources().getDisplayMetrics();	
		return Init(appName , dm.widthPixels,dm.heightPixels,  dm.xdpi , dm.ydpi, path);
	}
   public static EyeTextureParameter GetEyeTextureParameter(int eyeTextureType)
   {
	   
	   EyeTextureParameter Ret =  new EyeTextureParameter();
		int []Parameter = {0,0,0};
		Ret.m_EyeTexID = GetEyeTexture(eyeTextureType , Parameter);
		Ret.m_EyeTexType=eyeTextureType ;
		Ret.m_Width = Parameter[0];
		Ret.m_Height= Parameter[1];
		Ret.m_Format= Parameter[2];
		return Ret;
   }
   private static String exportFromAssetsFile(Context context)
   {
   	String result=null;    	
	File CacheDir = context.getCacheDir();
   	String cachePath = CacheDir.getPath();
   	result = cachePath;
   	try
   	{
   		Resources r = context.getResources();
   		String[] ProfileList =r.getAssets().list("MojingSDK"); 
   		LogTrace("Find " + ProfileList.length + " file(s) in assets/MojingSDK");
   		if (ProfileList.length > 0)
   		{
   			AssetManager assetManager = r.getAssets();
   			for(String filename : ProfileList) {
   				InputStream in = null;
   				OutputStream out = null;
   				try {
   					in = assetManager.open("MojingSDK/" + filename);
   					File outFile = new File(CacheDir, filename);
   					out = new FileOutputStream(outFile);
   					copyFile(in, out);
   					in.close();
   					in = null;
   					out.flush();
   					out.close();
   					out = null;
   					LogTrace("copy " + filename + " to CacheDir");
   				} catch(IOException e) {
   					LogError("Failed to copy asset file: " + filename + e.toString());
   				}// end catch       
   			}// end for
   		}//length>0
   		
   	}// end try
   	catch(Exception e)
   	{
   		e.printStackTrace();
   	}   
   	return result;
   }
   
   private static void copyFile(InputStream in, OutputStream out) throws IOException 
   {
		byte[] buffer = new byte[1024];
		int read;
		while((read = in.read(buffer)) != -1)
		{
			out.write(buffer, 0, read);
		}
	}

	private static String getApplicationName(Context context) {  
		String applicationName = "UNKNOWN";
        PackageManager packageManager = null;  
        ApplicationInfo applicationInfo = null;  
        try {  
            packageManager = context.getPackageManager();
            applicationInfo = packageManager.getApplicationInfo(context.getApplicationInfo().packageName, 0);  
			applicationName = (String) packageManager.getApplicationLabel(applicationInfo); 
        } catch (PackageManager.NameNotFoundException e) {  
            applicationInfo = null;  
        }  
        return applicationName;  
    }  

	// 传感器相关接口
	public static native boolean StartTracker(int nSampleFrequence);
	public static native int CheckSensors();
	public static native void ResetSensorOrientation();
	public static native void ResetTracker();
	public static native float IsTrackerCalibrated();
	public static native boolean StartTrackerCalibration();
	public static native void getLastHeadView(float[] headView);
	public static native void getLastHeadEulerAngles(float[] headEulerAngles);
	public static native void getLastHeadQuarternion(float[] jUnitQuarternion);
	public static native void StopTracker();

	// 畸变与显示相关接口
	public static native boolean EnterMojingWorld(String GlassesName);
	public static native boolean ChangeMojingWorld(String GlassesName);
	public static native boolean LeaveMojingWorld();
	public static native boolean OnSurfaceChanged(int newWidth, int newHeight);
	public static native boolean DrawTexture(int LeftTexID, int RightTexID);	
	public static native float GetMojingWorldFOV();	
	private static native int GetEyeTexture(int eyeTextureType, int[] outParams);
	public static native float GetGlassesSeparationInPix();
	public static native void SetImageYOffset(float fYOffset);
	public static native boolean AddTextureLayout(int nLeftEyeTextureId, int nRightEyeTextureId, int zorder);
	public static native boolean DeleteTextureLayout(boolean leftEye, int zorder);
	public static native void SetCenterLine(int iWidth , int colR, int colG, int colB, int colA);
	public static void SetCenterLine(int iWidth )
	{
		SetCenterLine(iWidth , 255 , 255 ,255 , 255);
	}
	// 厂商-产品-镜片-应用 管理
	public static native String GetManufacturerList(String strLanguageCodeByISO963);
	public static native String GetProductList(String strManufacturerKey, String strLanguageCodeByISO963);
	public static native String GetGlassList(String  strProductKey, String  strLanguageCodeByISO963);
	public static native String GetGlassInfo(String  strGlassKey, String  strLanguageCodeByISO963);
	public static native String GenerationGlassKey(String  strProductQRCode, String  strGlassQRCode);

	public static native String GetSDKVersion();
	public static native boolean GetInitSDK();
	public static native boolean GetStartTracker();
	public static native boolean GetInMojingWorld();
	public static native String GetGlasses();

	public static native void FuncTest();
	private static native void Log(int logLevel, String sInfo, String sFileName, int line);

	private static void Log(int logLevel, String sInfo)
	{
		StackTraceElement[] stacktrace = Thread.currentThread().getStackTrace();
		// 0 is dalvik.system.VMStack.getThreadStackTrace
		// 1 is java.lang.Thread.getStackTrace
		// 2 is this function: Log
		// 3 is the caller
		String tag = "[" + stacktrace[4].getMethodName() + "] " + sInfo;
		Log((int)logLevel, tag, stacktrace[4].getFileName(), stacktrace[4].getLineNumber());
      }

	  public static void LogError(String sInfo)
	  {
		Log(40000, sInfo);
	  }

	  public static void LogWarning(String sInfo)
	  {
		Log(30000, sInfo);
	  }

	  public static void LogDebug(String sInfo)
	  {
		Log(10000, sInfo);
	  }

  	  public static void LogTrace(String sInfo)
	  {
		Log(0, sInfo);
	  }
	  
}
